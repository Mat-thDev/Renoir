// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  password String
  profile  Profile?

  posts Post[]
  roles Role[] @relation("UserRoles")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String   @default("")
  banner    String   @default("")
  picture   String   @default("")
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Follow {
  id         Int     @id @default(autoincrement())
  follower   Profile @relation("Following", fields: [followerId], references: [id])
  followerId Int

  following   Profile @relation("Followers", fields: [followingId], references: [id])
  followingId Int

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[] @relation("RolePermissions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  content       String?
  featuredImage String?
  categories    Category[]
  tags          Tag[]      @relation("PostTags")
  status        PostStatus @default(DRAFT)
  author        User       @relation(fields: [authorId], references: [id])
  authorId      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

enum PostStatus {
  PUBLISHED
  REVIEW
  ARCHIVED
  DRAFT
}
